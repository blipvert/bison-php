# PHP tests for simple calculator.           -*- Autotest -*-

# Copyright (C) 2007-2011 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

AT_BANNER([[PHP Calculator.]])


# ------------------------- #
# Helping Autotest macros.  #
# ------------------------- #


# _AT_DATA_PHP_CALC_Y($1, $2, $3, [BISON-DIRECTIVES], [BISON-EPILOGUE])
# ---------------------------------------------------------------------
# Produce `calc.y'.  Don't call this macro directly, because it contains
# some occurrences of `$1' etc. which will be interpreted by m4.  So
# you should call it with $1, $2, and $3 as arguments, which is what
# AT_DATA_PHP_CALC_Y does.
m4_define([_AT_DATA_PHP_CALC_Y],
[m4_if([$1$2$3], $[1]$[2]$[3], [],
       [m4_fatal([$0: Invalid arguments: $@])])dnl
AT_DATA([Calc.y],
[[/* Infix notation calculator--calc */
%language "PHP"
%name-prefix "Calc"
%define parser_class_name "Calc"

]$4[

/* Bison Declarations */
%token NUM "number"

%nonassoc '=' /* comparison            */
%left '-' '+'
%left '*' '/'
%left NEG     /* negation--unary minus */
%right '^'    /* exponentiation        */

/* Grammar follows */
%%
input:
  line
| input line
;

line:
  '\n'
| exp '\n'
| error '\n'
;

exp:
  NUM                { $$ = $1;                                             }
| exp '=' exp
  {
    if ($1 != $3)
      $this->yyerror (]AT_LOCATION_IF([[@$,]])[ "calc: error: " . $1 . " != " . $3);
  }
| exp '+' exp        { $$ = $1 + $3;                                        }
| exp '-' exp        { $$ = $1 - $3;                                        }
| exp '*' exp        { $$ = $1 * $3;                                        }
| exp '/' exp        { $$ = $1 / $3;                                        }
| '-' exp  %prec NEG { $$ = -$2;                                            }
| exp '^' exp        { $$ = (int) pow ($1, $3);                             }
| '(' exp ')'        { $$ = $2;                                             }
| '(' error ')'      { $$ = 1111;                                           }
| '!'                { $$ = 0; return self::YYERROR;                        }
| '-' error          { $$ = 0; return self::YYERROR;                        }
;

]AT_LEXPARAM_IF([[
%code lexer {
]],
[[
%%
class CalcLexer implements Lexer {
]])[
  private $buffer;

  public function __construct ($is)
  {
    $this->buffer = stream_get_contents ($is);
    $this->yypos = new Position (1, 0);
  }

]AT_LOCATION_IF([[
  private $yypos;

  public function getStartPos() {
    return $this->yypos;
  }

  public function getEndPos() {
    return $this->yypos;
  }

  public function yyerror (Location $l, $s)
  {
    if (is_null ($l))
      fprintf (STDERR, "%s\n", s);
    else
      fprintf (STDERR, "%s: %s\n", $l->toString (), $s);
  }
]], [[
  public function yyerror ($s)
  {
    fprintf (STDERR, "%s\n", $s);
  }
]])[

  private $yylval;

  public function getLVal() {
    return $this->yylval;
  }

  public function yylex () {
    ]AT_LOCATION_IF([[$this->yypos = new Position ($this->yypos->lineno (), $this->yypos->token () + 1);]])[

    $this->buffer = preg_replace ("/^[\\t ]+/", "", $this->buffer);

      if (strlen ($this->buffer) == 0)
        return Lexer::EOF;
      else
        if (substr ($this->buffer, 0, 1) == "\n")
          {
            ]AT_LOCATION_IF([[$this->yypos = new Position ($this->yypos->lineno () + 1, 0);]])[
            $this->buffer = substr ($this->buffer, 1);
            return ord ("\n");
          }
        else
          if (preg_match ("/^([0-9]+)/", $this->buffer, $matches))
            {
              $this->yylval = $matches [1];
              $this->buffer = substr ($this->buffer, strlen ($matches [1]));
              return self::NUM;
            }
          else
            {
              $tt = substr ($this->buffer, 0, 1);
              $this->buffer = substr ($this->buffer, 1);
              return ord ($tt);
            }
    }

]AT_LEXPARAM_IF([[
};
%%]], [[
}
]])

[
class Position {
  public $line;
  public $token;

  public function __construct ($l = 0, $t = 0)
  {
    $this->line = $l;
    $this->token = $t;
  }

  public function equals (Position $l)
  {
    return $l->line == $this->line && $l->token == $this->token;
  }

  public function toString ()
  {
    return $this->line . "." . $this->token;
  }

  public function lineno ()
  {
    return $this->line;
  }

  public function token ()
  {
    return $this->token;
  }
}

]$5[
]])
])# _AT_DATA_PHP_CALC_Y


# AT_DATA_CALC_Y([BISON-OPTIONS, BISON-EPILOGUE])
# -----------------------------------------------
# Produce `calc.y'.
m4_define([AT_DATA_PHP_CALC_Y],
[_AT_DATA_PHP_CALC_Y($[1], $[2], $[3], [$1], [$2])
])


# _AT_CHECK_PHP_CALC_ERROR(BISON-OPTIONS, INPUT,
#                          [VERBOSE-AND-LOCATED-ERROR-MESSAGE])
# -------------------------------------------------------------
# Run `calc' on INPUT, and expect a `syntax error' message.
#
# If INPUT starts with a slash, it is used as absolute input file name,
# otherwise as contents.
#
# The VERBOSE-AND-LOCATED-ERROR-MESSAGE is stripped of locations
# and expected tokens if necessary, and compared with the output.
m4_define([_AT_CHECK_PHP_CALC_ERROR],
[m4_bmatch([$2], [^/],
           [AT_PHP_PARSER_CHECK([Calc.php < $2], 0, [], [stderr])],
           [AT_DATA([[input]],
[[$2
]])
AT_PHP_PARSER_CHECK([Calc.php < input], 0, [], [stderr])])

# Normalize the observed and expected error messages, depending upon the
# options.
# 1. Create the reference error message.
AT_DATA([[expout]],
[$3
])
# 2. If locations are not used, remove them.
AT_YYERROR_SEES_LOC_IF([],
[[sed 's/^[-0-9.]*: //' expout >at-expout
mv at-expout expout]])
# 3. If error-verbose is not used, strip the`, unexpected....' part.
m4_bmatch([$1], [%error-verbose], [],
[[sed 's/syntax error, .*$/syntax error/' expout >at-expout
mv at-expout expout]])
# 4. Check
AT_CHECK([cat stderr], 0, [expout])
])

# _AT_CHECK_PHP_CALC([BISON-DIRECTIVES], [BISON-EPILOGUE])
# --------------------------------------------------------
# Start a testing chunk which compiles `calc' grammar with
# BISON-DIRECTIVES, and performs several tests over the parser.
m4_define([_AT_CHECK_PHP_CALC],
[# We use integers to avoid dependencies upon the precision of doubles.
AT_SETUP([Calculator $1])

AT_BISON_OPTION_PUSHDEFS([$1])

AT_DATA_PHP_CALC_Y([$1], [$2])

AT_BISON_CHECK([-o Calc.php Calc.y])
AT_PHP_LINT([Calc.php])

# Test the priorities.
AT_DATA([[input]],
[[1 + 2 * 3 = 7
1 + 2 * -3 = -5

-1^2 = -1
(-1)^2 = 1

---1 = -1

1 - 2 - 3 = -4
1 - (2 - 3) = 2

2^2^3 = 256
(2^2)^3 = 64
]])
AT_PHP_PARSER_CHECK([Calc.php < input], 0, [], [stderr])


# Some syntax errors.
_AT_CHECK_PHP_CALC_ERROR([$1], [0 0],
                          [1.2: syntax error, unexpected number])
_AT_CHECK_PHP_CALC_ERROR([$1], [1//2],
                          [1.3: syntax error, unexpected '/', expecting number or '-' or '(' or '!'])
_AT_CHECK_PHP_CALC_ERROR([$1], [error],
                          [1.1: syntax error, unexpected $undefined])
_AT_CHECK_PHP_CALC_ERROR([$1], [1 = 2 = 3],
                          [1.4: syntax error, unexpected '='])
_AT_CHECK_PHP_CALC_ERROR([$1], [
+1],
                          [2.1: syntax error, unexpected '+'])
# Exercise error messages with EOF: work on an empty file.
_AT_CHECK_PHP_CALC_ERROR([$1], [/dev/null],
                          [1.1: syntax error, unexpected end of input])

# Exercise the error token: without it, we die at the first error,
# hence be sure to
#
# - have several errors which exercise different shift/discardings
#   - (): nothing to pop, nothing to discard
#   - (1 + 1 + 1 +): a lot to pop, nothing to discard
#   - (* * *): nothing to pop, a lot to discard
#   - (1 + 2 * *): some to pop and discard
#
# - test the action associated to `error'
#
# - check the lookahead that triggers an error is not discarded
#   when we enter error recovery.  Below, the lookahead causing the
#   first error is ")", which is needed to recover from the error and
#   produce the "0" that triggers the "0 != 1" error.
#
_AT_CHECK_PHP_CALC_ERROR([$1],
                          [() + (1 + 1 + 1 +) + (* * *) + (1 * 2 * *) = 1],
[1.2: syntax error, unexpected ')', expecting number or '-' or '(' or '!'
1.11: syntax error, unexpected ')', expecting number or '-' or '(' or '!'
1.14: syntax error, unexpected '*', expecting number or '-' or '(' or '!'
1.24: syntax error, unexpected '*', expecting number or '-' or '(' or '!'
1.1-1.27: calc: error: 4444 != 1])

# The same, but this time exercising explicitly triggered syntax errors.
# POSIX says the lookahead causing the error should not be discarded.
_AT_CHECK_PHP_CALC_ERROR([$1], [(!) + (0 0) = 1],
[1.7: syntax error, unexpected number
1.1-1.10: calc: error: 2222 != 1])
_AT_CHECK_PHP_CALC_ERROR([$1], [(- *) + (0 0) = 1],
[1.3: syntax error, unexpected '*', expecting number or '-' or '(' or '!'
1.8: syntax error, unexpected number
1.1-1.11: calc: error: 2222 != 1])
AT_BISON_OPTION_POPDEFS

AT_CLEANUP
])# _AT_CHECK_PHP_CALC


# AT_CHECK_PHP_CALC([BISON-DIRECTIVES], [BISON-EPILOGUE])
# -------------------------------------------------------
# Start a testing chunk which compiles `calc' grammar with
# BISON-DIRECTIVES, and performs several tests over the parser.
# Run the test with and without %error-verbose.
m4_define([AT_CHECK_PHP_CALC],
[_AT_CHECK_PHP_CALC([$1], [$2])
_AT_CHECK_PHP_CALC([%error-verbose $1], [$2])
_AT_CHECK_PHP_CALC([%locations $1], [$2])
_AT_CHECK_PHP_CALC([%error-verbose %locations $1], [$2])
])# AT_CHECK_PHP_CALC


# ------------------------ #
# Simple LALR Calculator.  #
# ------------------------ #

AT_CHECK_PHP_CALC([], [[
  $l = new CalcLexer (STDIN);
  $p = new Calc ($l);
  $p->parse ();
]])

AT_CHECK_PHP_CALC([%lex-param { $is } ], [[
  $c = new Calc (STDIN);
  $c->parse ();
]])



# ----------------#
# PHP Directives. #
# ----------------#

AT_BANNER([PHP Parameters.])


# AT_CHECK_PHP_MINIMAL([DIRECTIVES], [PARSER_ACTION], [POSITION_CLASS])
# ---------------------------------------------------------------------
# Check that a mininal parser with DIRECTIVES compiles in PHP.
# Put the PHP code in YYParser.php.
m4_define([AT_CHECK_PHP_MINIMAL],
[
AT_DATA([[YYParser.y]], [
%language "PHP"
%locations
%debug
%error-verbose
%token-table
%token END "end"
$1
%%
start: END {$2};
%%
class m4_default([$3], [Position]) {}
])
AT_BISON_CHECK([[YYParser.y]])
AT_CHECK([[grep '[mb]4_' YYParser.y]], [1], [ignore])
AT_PHP_LINT([[YYParser.php]])
])


# AT_CHECK_PHP_MINIMAL_W_LEXER([1:DIRECTIVES], [2:LEX_THROWS],
#       [3:YYLEX_ACTION], [4:LEXER_BODY], [5:PARSER_ACTION], [6:STYPE],
#       [7:POSITION_TYPE], [8:LOCATION_TYPE])
# ---------------------------------------------------------------------
# Check that a mininal parser with DIRECTIVES and a "%code lexer".
# YYLEX is the body of yylex () which throws LEX_THROW.
# compiles in PHP.
m4_define([AT_CHECK_PHP_MINIMAL_W_LEXER],
[AT_CHECK_PHP_MINIMAL([$1

%code lexer
{
  private $yylval;
  public function getLVal() { return $this->yylval; }

  public function getStartPos() { return null; }
  public function getEndPos()   { return null; }

  public function yyerror (m4_default([$8], [Location]) $loc, $s)
  {
    fprintf (STDERR, "%s: %s\n", $loc->toString (), $s);
  }

  public function yylex ()$2
  {
    $3
  }

  $4
}], [$5], [$7])])


# AT_CHECK_PHP_GREP([LINE], [COUNT=1])
# ------------------------------------
# Check that YYParser.php contains exactly COUNT lines matching ^LINE$
# with grep.
m4_define([AT_CHECK_PHP_GREP],
        [AT_CHECK([grep -c '^$1$' YYParser.php], [], [m4_default([$2], [1])
])
])


# ------------------------ #
# PHP parser class names.  #
# ------------------------ #

AT_SETUP([PHP parser class and package names])

AT_CHECK_PHP_MINIMAL([])
AT_CHECK_PHP_GREP([[class YYParser]])

AT_CHECK_PHP_MINIMAL([[%name-prefix "Prefix"]])
AT_CHECK_PHP_GREP([[class PrefixParser]])

AT_CHECK_PHP_MINIMAL([[%define api.tokens.prefix "TOK_"]])
AT_CHECK_PHP_GREP([[.*TOK_END.*]])

AT_CHECK_PHP_MINIMAL([[%define parser_class_name "ParserClassName"]])
AT_CHECK_PHP_GREP([[class ParserClassName]])

AT_CLEANUP


# ---------------------------- #
# PHP parser class modifiers.  #
# ---------------------------- #

AT_SETUP([PHP parser class modifiers])

AT_CHECK_PHP_MINIMAL([[%define abstract]])
AT_CHECK_PHP_GREP([[abstract class YYParser]])

AT_CHECK_PHP_MINIMAL([[%define final]])
AT_CHECK_PHP_GREP([[final class YYParser]])

AT_CHECK_PHP_MINIMAL([[
%define annotations "/*@Deprecated @SupressWarnings(\"unchecked\") @SupressWarnings({\"unchecked\", \"deprecation\"}) @SupressWarnings(value={\"unchecked\", \"deprecation\"})*/"]])
AT_CHECK_PHP_GREP([[/\*@Deprecated @SupressWarnings("unchecked") @SupressWarnings({"unchecked", "deprecation"}) @SupressWarnings(value={"unchecked", "deprecation"})\*/ class YYParser]])

AT_CLEANUP


# --------------------------------------- #
# PHP parser class extends and implements #
# --------------------------------------- #

AT_SETUP([PHP parser class extends and implements])

AT_CHECK_PHP_MINIMAL([[%define extends "Thread"]])
AT_CHECK_PHP_GREP([[class YYParser extends Thread]])

AT_CHECK_PHP_MINIMAL([[%define implements "Cloneable"]])
AT_CHECK_PHP_GREP([[class YYParser implements Cloneable]])

AT_CHECK_PHP_MINIMAL([[
%define extends "Thread"
%define implements "Cloneable"]])
AT_CHECK_PHP_GREP([[class YYParser extends Thread implements Cloneable]])

AT_CLEANUP


# ------------------------------- #
# PHP %parse-param and %lex-param #
# ------------------------------- #

AT_SETUP([PHP %parse-param and %lex-param])

AT_CHECK_PHP_MINIMAL([])
AT_CHECK_PHP_GREP([[ *public function __construct (Lexer \$yylexer) *]])

# FIXME: AT_CHECK_PHP_MINIMAL([[%parse-param {int parse_param1}]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final int parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *public YYParser (Lexer yylexer, *int parse_param1) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param1 = parse_param1;]])

# FIXME: AT_CHECK_PHP_MINIMAL([[
# FIXME: %parse-param {int parse_param1}
# FIXME: %parse-param {long parse_param2}]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final int parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final long parse_param2;]])
# FIXME: AT_CHECK_PHP_GREP([[ *public YYParser (Lexer yylexer, *int parse_param1, *long parse_param2) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param1 = parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param2 = parse_param2;]])

AT_CHECK_PHP_MINIMAL_W_LEXER([], [], [[return EOF;]])
AT_CHECK_PHP_GREP([[ *public function __construct () *]])
AT_CHECK_PHP_GREP([[.* = new YYLexer *();]])

# FIXME: AT_CHECK_PHP_MINIMAL_W_LEXER([[%parse-param {int parse_param1}]],
# FIXME:     [], [[return EOF;]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final int parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *public YYParser (int parse_param1) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected YYParser (Lexer yylexer, *int parse_param1) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param1 = parse_param1;]], [2])

# FIXME: AT_CHECK_PHP_MINIMAL_W_LEXER([[
# FIXME: %parse-param {int parse_param1}
# FIXME: %parse-param {long parse_param2}]],
# FIXME:     [], [[return EOF;]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final int parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final long parse_param2;]])
# FIXME: AT_CHECK_PHP_GREP([[ *public YYParser (int parse_param1, *long parse_param2) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected YYParser (Lexer yylexer, *int parse_param1, *long parse_param2) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param1 = parse_param1;]], [2])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param2 = parse_param2;]], [2])

AT_CHECK_PHP_MINIMAL_W_LEXER([[%lex-param {$lex_param1}]],
    [], [[return EOF;]], [[function __construct ($lex_param1) {}]])
AT_CHECK_PHP_GREP([[ *public function __construct (\$lex_param1) *]])
AT_CHECK_PHP_GREP([[.* = new YYLexer *(\$lex_param1);]])

AT_CHECK_PHP_MINIMAL_W_LEXER([[
%lex-param {$lex_param1}
%lex-param {$lex_param2}]],
    [], [[return EOF;]], [[function __construct ($lex_param1, $lex_param2) {}]])
AT_CHECK_PHP_GREP([[ *public function __construct (\$lex_param1, *\$lex_param2) *]])
AT_CHECK_PHP_GREP([[.* = new YYLexer *(\$lex_param1, *\$lex_param2);]])

AT_CHECK_PHP_MINIMAL_W_LEXER([[
%lex-param {$lex_param1}
%lex-param {$lex_param2}
%lex-param {Exception $lex_param3}]],
    [], [[return EOF;]], [[function __construct ($lex_param1, $lex_param2, Exception $lex_param3) {}]])
AT_CHECK_PHP_GREP([[ *public function __construct (\$lex_param1, *\$lex_param2, *Exception \$lex_param3) *]])
AT_CHECK_PHP_GREP([[.* = new YYLexer *(\$lex_param1, *\$lex_param2, *\$lex_param3);]])

# FIXME: AT_CHECK_PHP_MINIMAL_W_LEXER([[
# FIXME: %parse-param {int parse_param1}
# FIXME: %parse-param {long parse_param2}
# FIXME: %lex-param {char lex_param1}
# FIXME: %lex-param {short lex_param2}]],
# FIXME:     [], [[return EOF;]], [[YYLexer (char lex_param1, short lex_param2) {}]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final int parse_param1;]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected final long parse_param2;]])
# FIXME: AT_CHECK_PHP_GREP([[ *public YYParser (char lex_param1, *short lex_param2, *int parse_param1, *long parse_param2) *]])
# FIXME: AT_CHECK_PHP_GREP([[.* = new YYLexer *(lex_param1, *lex_param2);]])
# FIXME: AT_CHECK_PHP_GREP([[ *protected YYParser (Lexer yylexer, *int parse_param1, *long parse_param2) *]])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param1 = parse_param1;]], [2])
# FIXME: AT_CHECK_PHP_GREP([[ *this.parse_param2 = parse_param2;]], [2])

AT_CLEANUP


# -------------------- #
# PHP constructor init #
# -------------------- #

AT_SETUP([PHP constructor init])

AT_CHECK_PHP_MINIMAL([[
%define extends "Thread"
%code init { super("Test Thread"); if (true) throw new InterruptedException(); }
%lex-param {int lex_param}]])
AT_CHECK([[grep -q 'super("Test Thread"); if (true) throw new InterruptedException();' YYParser.php]])

AT_CHECK_PHP_MINIMAL_W_LEXER([[
%define extends "Thread"
%code init { super("Test Thread"); if (true) throw new InterruptedException(); }]], [], [[return EOF;]])
AT_CHECK([[grep -q 'super("Test Thread"); if (true) throw new InterruptedException();' YYParser.php]])

AT_CLEANUP


# ------------------------------------- #
# PHP position_class and location_class #
# ------------------------------------- #

AT_SETUP([PHP position_class and location_class])

AT_CHECK_PHP_MINIMAL([[
%type<someobscuretype1> start;
%define location_type "MyLoc"
%define position_type "MyPos"]], [[$$ = $<someobscuretype2>1;]], [[MyPos]])
AT_CHECK([[grep 'someobscuretype' YYParser.php]], [1], [ignore])
AT_CHECK([[$EGREP -v ' */?\*' YYParser.php | grep 'Position']], [1], [ignore])
AT_CHECK([[$EGREP -v ' */?\*' YYParser.php | grep 'Location']], [1], [ignore])

AT_CHECK_PHP_MINIMAL_W_LEXER([[
%type<someobscuretype1> start;
%define location_type "MyLoc"
%define position_type "MyPos"]], [], [[return EOF;]], [],
[[$$ = $<someobscuretype2>1;]],
[[]], [[MyPos]], [[MyLoc]])
AT_CHECK([[grep 'php.awt.Color' YYParser.php]], [1], [ignore])
AT_CHECK([[$EGREP -v ' */?\*' YYParser.php | grep 'Position']], [1], [ignore])
AT_CHECK([[$EGREP -v ' */?\*' YYParser.php | grep 'Location']], [1], [ignore])

AT_CLEANUP
